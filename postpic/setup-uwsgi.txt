https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-centos-7
http://vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu/
http://code-maven.com/deploying-python-flask-using-uwsgi-on-ubuntu-14-04
https://www.haykranen.nl/2014/11/15/running-a-python-flask-app-with-nginx-using-uwsgi/

yum install uwsgi-plugin-python.x86_64 uwsgi

App name (e.g. if your Flask app says this: myapp = Flask(__name__), your app name is myapp)


.
└── postpic
    ├── app_uwsgi.ini <TEST>
    ├── app_uwsgi.sock
    ├── postpic
    │   ├── __init__.py
    │   ├── __init__.pyc
    │   ├── myapp.py
    │   └── myapp.pyc
    ├── pyenv
    ├── wsgi.py
    └── wsgi.pyc




% pip install virtualenv

% mkdir /var/www/postpic
% cd  /var/www/postpic

% virtualenv  pyenv
% source pyenv/bin/activate
% pip install uwsgi flask



# /var/www/postpic/wsgi.py

    from postpic.myapp import app
    if __name__ == "__main__":
        app.run()

# /var/www/postpic/postpic/myapp.py
    from flask import Flask
    app = Flask(__name__)

    @app.route("/")
    def hello():
        return "<h1 style='color:blue'>Hello There!</h1>"



# Test uWSGI Serving

% uwsgi  --http-socket :9000  --uid www-data --gid www-data  --plugin python  --wsgi-file wsgi.py  --callable app

#_{
uwsgi  --http-socket :9000 --plugin python --wsgi-file  wsgi.py 
--uid www-data --gid www-data 
 --process 10 --enable-threads
 processes = 2 * cpucores
#_ }



         
 
### nginx-config

/etc/nginx/sites-available

server {

    listen      80;
    server_name _;
    charset     utf-8;
    client_max_body_size 75M;
    access_log /var/log/nginx/postpic.log;
    error_log  /var/log/nginx/postpic.error error;

    location / { try_files $uri @apppostpic; }
    location @apppostpic {
        include uwsgi_params;
        uwsgi_pass unix:/var/www/postpic/app_uwsgi.sock;
    }

   location /static {
    root /var/www/postpic/postpic/static/;
   }

}


### Configuring uWSGI
        [uwsgi]

        module = wsgi:app
        plugin = python

    # // or
    # wsgi-file = /home/dev/project/app.py
    # plugin    = python
    # ////
        master = true
        processes = 5
    
    # bind to the specified UNIX/TCP socket using default protoco
        socket = /var/www/postpic/app_uwsgi.sock
    
    # set PYTHONHOME/virtualenv
        pyhome = /var/www/postpic/pyenv
        chmod-socket = 666
    
    # vacuum = true
        die-on-term = true
        uid = www-data
        gid = www-data
        callable = app
        enable-threads
        stats 127.0.0.1:9191

    # location of log files
        logto  = /var/log/uwsgi/%n.log

    # listen 120
    # alarm-backlog
    # /proc/sys/net/core/somaxconn
        
#### End  config  uWSGI

#### Test run by config 
% cd /var/www/postpic
uwsgi --ini  app_uwsgi.ini


#---  Service start /etc/init.d/uwsgi --

- /etc/init.d/uwsgi
- /etc/uwsgi.d/app_uwsgi.ini


##############
        [uwsgi]
        module = wsgi
        plugins = python
        base = /var/www/postpic/
        chdir = %(base)
    
    # // or
    #wsgi-file = /var/www/postpic/wsgi.py
    #plugin = python
    
        master = true
        processes = 5
    
    #bind to the specified UNIX/TCP socket using default protoco
        socket = /var/www/postpic/app_uwsgi.sock
    
    #set PYTHONHOME/virtualenv
        pyhome = /var/www/postpic/pyenv
        chmod-socket = 666
        vacuum = true
        die-on-term = true
        uid = www-data
        gid = www-data
        callable = app
        enable-threads
        stats 127.0.0.1:9191

    #location of log files
    #logto  = /var/log/uwsgi/%n.log
    #alarm-backlog
    #/proc/sys/net/core/somaxconn
    #listen 120

################


### docker error ####.
Ref. http://stevelaesch.tech/2016/07/06/systemd-inside-docker-container-failed-to-get-d-bus-connection-operation-not-permitted/
Failed to get D-Bus connection: Operation not permitted


docker run --privileged -d --restart always -p 11122:22 -it \
-e "container=docker"  -v /sys/fs/cgroup:/sys/fs/cgroup  \
--name ansible docker.io/ansible/centos7-ansible  /usr/sbin/init

# commit container to image
docker commit -m "postpic" -a "sahai" 733f01fdefbf postpic:v1  

# create container
docker run -it  -v /postpic/:/var/www/postpic/ --name  mypostpic -p 80:80  postpic:v1  /bin/bash

# start container
docker start  mypostpic

# execute  container 
docker exec -it  mypostpic /bin/bash

# Description Level 2
docker inspect mypostpic
